<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Middle tier application context definition for the image database.
  -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd"
    default-lazy-init="true">

	<!-- properties 정보를 가지고 오기 위한 property-placeholder 지정 -->
	<context:property-placeholder  location="classpath:/properties/app.properties"/>
	<util:properties id="config" location="classpath:/properties/app.properties" />
	
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" 				value="${jdbc.driverClassName}" />
        <property name="url"             				value="${jdbc.url}" />
        <property name="username"        				value="${jdbc.username}" />
        <property name="password"        				value="${jdbc.password}" />
   		<property name="defaultAutoCommit"        		value="false" />
        <property name="removeAbandonedTimeout"     	value="600" />
        <property name="removeAbandonedOnBorrow"     	value="true" />
        <property name="removeAbandonedOnMaintenance"	value="true" />
        <property name="initialSize"					value="5" />
        <property name="minIdle"						value="5" />
        <property name="maxIdle"						value="50" />
        <property name="maxTotal"						value="50" />
        <property name="poolPreparedStatements" value="true" />
    </bean>
	
    <bean id="dataSourceReadOnly" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" 				value="${jdbc.driverClassName}" />
        <property name="url"             				value="${jdbc.url}" />
        <property name="username"        				value="${jdbc.username.readonly}" />
        <property name="password"        				value="${jdbc.password.readonly}" />
        <property name="removeAbandonedTimeout"     	value="600" />
        <property name="removeAbandonedOnBorrow"     	value="true" />
        <property name="removeAbandonedOnMaintenance"	value="true" />
        <property name="initialSize"					value="5" />
        <property name="minIdle"						value="5" />
        <property name="maxIdle"						value="50" />
        <property name="maxTotal"						value="50" />
        <property name="poolPreparedStatements" value="true" />
    </bean>

    <!-- Sql Session -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
	        <property name="dataSource" ref="dataSource"/>
	        <property name="configLocation" value="classpath:/properties/SqlMapConfig.xml" />
	        <property name="mapperLocations" value="classpath:/${dbType}/*.xml" />
	</bean>
	<!-- Default SqlSession -->	 
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
	        <constructor-arg index="0" ref="sqlSession"/>
	</bean>

	<bean id="sqlSessionReadOnly" class="org.mybatis.spring.SqlSessionFactoryBean">
	        <property name="dataSource" ref="dataSourceReadOnly"/>
	        <property name="configLocation" value="classpath:/properties/SqlMapConfig.xml" />
	        <property name="mapperLocations" value="classpath:/${dbType}/*.xml" />
	</bean>
	<!-- Default SqlSession -->	 
	<bean id="sqlSessionTemplateReadOnly" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
	        <constructor-arg index="0" ref="sqlSessionReadOnly"/>
	</bean>
	<!-- Batch Insert SqlSession -->
<!-- 	<bean id="sqlSessionBatch" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache"> -->
<!-- 	        <constructor-arg index="0" ref="sqlSession"/> -->
<!-- 	        <constructor-arg index="1" value="BATCH" /> -->
<!-- 	</bean> -->

    
 	<!-- transaction --> 
 	<!-- 트랜잭션이 필요한 서비스의 메소드(또는 서비스단)에 @Transactional 어노테이션을 추가해준다. -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  <property name="dataSource" ref="dataSource" />
	</bean>

	<!-- @Transactional 선언 없이 트랜잭션 처리 전체 적용시  사용 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="select*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="insert*" rollback-for="Exception" />
			<tx:method name="update*" rollback-for="Exception" />
			<tx:method name="delete*" rollback-for="Exception" />
			<tx:method name="save*" rollback-for="Exception" />
			<tx:method name="*Action" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	
	<!-- Transaction 설정 -->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="requiredTx" expression="execution(public * com.tectone.web..*Service.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="requiredTx" />
    </aop:config>
    
</beans>
